/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.developerphil.gw

import assertk.all
import assertk.assertThat
import assertk.assertions.hasClass
import assertk.assertions.hasMessage
import assertk.assertions.isEqualTo
import assertk.assertions.isFailure
import assertk.thrownError
import com.google.common.jimfs.Configuration
import com.google.common.jimfs.Jimfs
import org.junit.Before
import java.nio.file.Files
import kotlin.io.path.listDirectoryEntries
import kotlin.test.Test

class GradleFinderTest {
    @Test
    fun canFindGradleWrapperInSameFolder() {
        with(fileSystem("/project/")) {
            assertThat(gradlePath()).isEqualTo(getPath("gradlew"))
        }

        with(fileSystem("/project/project_a")) {
            assertThat(gradlePath()).isEqualTo(getPath("gradlew"))
        }
    }

    @Test
    fun canFindGradleWrapperInParentFolder() {
        with(fileSystem("/project/project_a/feature/")) {
            assertThat(gradlePath()).isEqualTo(getPath("../gradlew"))
        }

        with(fileSystem("/project/project_a/feature/login")) {
            assertThat(gradlePath()).isEqualTo(getPath("../../gradlew"))
        }
    }

    @Test
    fun throwExceptionIfGradlewIsNotFound() {
        with(fileSystem("/")) {
            assertThat { gradlePath() }
                .isFailure()
                .all {
                    hasMessage("couldn't find a gradle wrapper under /")
                    hasClass(GradleNotFoundException::class.java)
                }
        }

        with(fileSystem("/tmp/logs")) {
            assertThat { gradlePath() }
                .isFailure()
                .all {
                    hasMessage("couldn't find a gradle wrapper under /tmp/logs")
                    hasClass(GradleNotFoundException::class.java)
                }
        }
    }


    /**
     * Structure:
     * /
     * ├── project
     * │   ├── gradlew
     * │   ├── project_a
     * │   │   ├── feature
     * │   │   │   └── login
     * │   │   └── gradlew
     * │   └── project_b
     * └── tmp
     *     └── logs
     */
    private fun fileSystem(workingDirectory: String) = Jimfs.newFileSystem(
        Configuration.unix().toBuilder()
            .setWorkingDirectory(workingDirectory)
            .build()
    )
        .apply {
            Files.createDirectories(getPath("/project/project_a/feature/login"))
            Files.createFile(getPath("/project/gradlew"))
            Files.createFile(getPath("/project/project_a/gradlew"))

            Files.createDirectories(getPath("/project/project_b"))
        }

}

