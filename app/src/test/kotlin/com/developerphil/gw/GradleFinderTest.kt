/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.developerphil.gw

import assertk.all
import assertk.assertThat
import assertk.assertions.hasClass
import assertk.assertions.hasMessage
import assertk.assertions.isEqualTo
import assertk.assertions.isFailure
import com.developerphil.gw.TestData.unixFileSystem
import kotlin.test.Test

class GradleFinderTest {

    @Test
    fun canFindGradleWrapperInSameFolder() {
        with(unixFileSystem("/project/")) {
            assertThat(gradlePath()).isEqualTo(getPath("./gradlew"))
        }

        with(unixFileSystem("/project/project_a")) {
            assertThat(gradlePath()).isEqualTo(getPath("./gradlew"))
        }
    }

    @Test
    fun canFindGradleWrapperInParentFolder() {
        with(unixFileSystem("/project/project_a/feature/")) {
            assertThat(gradlePath()).isEqualTo(getPath("../gradlew"))
        }

        with(unixFileSystem("/project/project_a/feature/login")) {
            assertThat(gradlePath()).isEqualTo(getPath("../../gradlew"))
        }
    }

    @Test
    fun throwExceptionIfGradlewIsNotFound() {
        with(unixFileSystem("/")) {
            assertThat { gradlePath() }
                .isFailure()
                .all {
                    hasMessage("couldn't find a gradle wrapper under /")
                    hasClass(GradleNotFoundException::class.java)
                }
        }

        with(unixFileSystem("/tmp/logs")) {
            assertThat { gradlePath() }
                .isFailure()
                .all {
                    hasMessage("couldn't find a gradle wrapper under /tmp/logs")
                    hasClass(GradleNotFoundException::class.java)
                }
        }
    }


    @org.junit.Test
    fun `Files should have an executable path`() {
        val fileSystem = unixFileSystem("/project")

        assertThat(fileSystem.getPath("gradlew").toUnixExecutable().toString()).isEqualTo("./gradlew")
        assertThat(fileSystem.getPath("../gradlew").toUnixExecutable().toString()).isEqualTo("../gradlew")
        assertThat(fileSystem.getPath("project_a/gradlew").toUnixExecutable().toString()).isEqualTo("project_a/gradlew")
    }
}

